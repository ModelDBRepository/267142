// Det_gAMPA-Spike_Probability_1_1.hoc
// Determine the effect spike probability during gAMPA Inputs 
// Varies a factor on gAMPA
//
// AMPA Synapses are Exp2-Synapses with physiological kinetic properties and
// a reversal potential of -12 mV (from pAMPA = 0.5, e(Na) = 66, e(K) = -90) and variable amplitudes
// 
// Author: Werner Kilb
// Version 1.1
// Date: 26-Feb-2021
//--------------------------------------------------

// Header Values ------------------------------------------------------
    strdef VERSION, CELL, AP, DENOM, PROGRAM
    PROGRAM = "DetSpikeProbab_Dist"
    VERSION = "2.0"
    CELL = "Real"
    AP = "ndrf"
    gKaMax_ndrfAP = 0.0018    // adapt gK to prevent depolarization block during EPSPs
    DENOM = "A"
    VARIABLE = 0

// ------------Definition of Parameters -------------------------------
    //Parameters to define th frequency
    StimStart = 0         //- Fixed
    StimDuration = 2000
    StimNumber = 10 
    StimFreq = StimNumber/StimDuration * 1000
    tstop = StimStart+StimDuration+50 


    // seed Values for random generator
    seed_AMPA = 3                 //becasue this seed fits with the seedGABA = 0 in the ollowing simulations

    // Determination Parameters AMPA ------------------------------------
    gAMPA = 0.000305            // µS synaptic weight according to miniature events
    gAMPAfact = VARIABLE          // Facor to calculate gAMPA with 50% Spike Probability according to Det_Spike_Probabl_gAMPA.hoc
    gAMPAstart = 1.2
    gAMPAstep = 0.1
    gAMPAend = 2.7
    
    AMPA_Rise = 0.5             // ms arbitraray Value
    AMPA_Decay = 11             // ms from Lombardi et a. (2018)
    AMPA_Rev = -12              // mV Estmated reversal potential 
    nAMPAsyn = StimNumber       // Number of AMPA synapses 
    nAMPAinputs = 1             // number of inputs per synapse

    // Definition of various runtime parameters --------------------------
    v_init = -50.5              // Initial voltage
    dt = 0.025                   // Step Interval in ms
    steps_per_ms = 2
    celsius = 31                // measured at°C
    ndend=56                    // Number of dendrites
    NumberRept = 999
    APThresh = -10              // mV Thresholf for AP-detection algorithm

    RepetitionIndex = 0

    //- Results Variables -----------------------------------------------
    AMPA_ExcitProbal = VARIABLE               // Excit Thres only AMPA Stim
    AMPA_AverageAPs = VARIABLE                // Avrg. Ap Number only AMPA Stim

// Define vectors to link modelled parameter output ---------------------------------
    objref voltvec                                            
    voltvec = new Vector()                                     // Lector used forstorage of voltage trace for further analysis
    voltvec.record(&v(.5))                                     // Link Volt vector (mesured in soma) to Output-Vectors


// ---------Definition of synaptic objects -------------------------------------
    // Objects for Synapses ---------------------------------------------------------
    objref AMPAsyn[nAMPAsyn]

    // random function for synapse definition
    objref randAMPAloc        // random function for determination of dendrite number
    objref randAMPAdend      // random function for localization of synapses in which dendrite 
    objref randAMPAg         // random function for synaptic parameters (timing and g)
    objref randAMPAt

    // definition of Vectors for AMPA-Stimulation (t_vec = timestamps t_vecr = sorted timestamps, g_vec = rel conductance)
    objref AMPA_Stim[nAMPAsyn], AMPA_t_vec[nAMPAsyn], AMPA_t_vecr[nAMPAsyn], NetCon_AMPA[nAMPAsyn], AMPA_g_vec[nAMPAsyn]

// --- definition of dostal and proximal dendrites ----
    nDistDend = 17           // Number or Perisomatic dendrites
    objref DistDend
    DistDend = new Vector(nDistDend)            // List of the perisomatic dendrites
        DistDend.x[0] = 20
        DistDend.x[1] = 30
        DistDend.x[2] = 32
        DistDend.x[3] = 34
        DistDend.x[4] = 37
        DistDend.x[5] = 38
        DistDend.x[6] = 39
        DistDend.x[7] = 43
        DistDend.x[8] = 44
        DistDend.x[9] = 47
        DistDend.x[10] = 49
        DistDend.x[11] = 50
        DistDend.x[12] = 51
        DistDend.x[13] = 52
        DistDend.x[14] = 53
        DistDend.x[15] = 54
        DistDend.x[16] = 55

    nProxDend = 12           // Number or Proximal dendrites
    objref ProxDend
    ProxDend = new Vector(nProxDend)            // List of the Proximal dendrites
        ProxDend.x[0] = 0
        ProxDend.x[1] = 1
        ProxDend.x[2] = 2
        ProxDend.x[3] = 3
        ProxDend.x[4] = 4
        ProxDend.x[5] = 5
        ProxDend.x[6] = 8
        ProxDend.x[7] = 9
        ProxDend.x[8] = 10
        ProxDend.x[9] = 13
        ProxDend.x[10] = 14
        ProxDend.x[11] = 18

// ---- Output vectors and files ---------------------------------------------------------------------------------
    objref SpikeProbabResults                                  // Matrix for outputs
                                                               // Definition of the output matrix
                                                               //           Col[0]  Col[1]      Col[2]    
                                                               // Line[0]   gAMPA    EAMPA      seedAMPA
                                                               // Line[1]   Rept     Excit?     #APs 
                                                               // .....
                                                               // Line[NumberRept+2] Excit?     #APs
    

    SpikeProbabResults = new Matrix()
    OutCol = VARIABLE                                          // Number of Columns in the Results-Array
    OutRow = VARIABLE                                          // Index of the actual row
    strdef OutSPRName                                          // Define Name of Output-File for Rheo-Shift Matrix
    objref OutSPRFile                                          // Define Output File for Rheo-Shift Matrix

    objref RepetitionFile
    strdef ReptFileName


// ------- Init_Random() ------------------------------------------------------------------//
// Initializes the Random Functions                                                        //
// Input: None                                                                             //
// Uses global variables: seed_GABA, seed-AMPA, GABAinputs, nAMPAinputs                    //
// Call: Init_Random()                                                                     //
// Output: None                                                                            // 
//-----------------------------------------------------------------------------------------//
proc Init_Random() {
    // Initialize Random Functions -----------
    randAMPAloc = new Random(seed_AMPA+1)
    randAMPAdend = new Random(seed_AMPA+3)
    randAMPAt = new Random(seed_AMPA+5)
    randAMPAg = new Random(seed_AMPA+6)

    //Define properties of random Function 
    randAMPAt.uniform(StimStart, StimStart+StimDuration)
    randAMPAg.normal(1, 0.26) //rel variance of AMPA according to results

    // generate Vectors --- (nAMPAinputs defines number of inputs per synapse) ------
    for i = 0, nAMPAsyn-1 {
       AMPA_t_vec[i] = new Vector(nAMPAinputs)
       AMPA_t_vecr[i] = new Vector(nAMPAinputs)
       AMPA_g_vec[i] = new Vector(nAMPAinputs)
    }
} // end of proc InitRandom


// ------- Procedure Distr_AMPA_Synapses --------------------------------------------------//
// Distributes the AMPA synpases across the dendrite                                       //
// Input: None                                                                             //
// Uses global constants: AMPA_Rise, AMPA_Decay                                            //
// Call: Distr_AMPA_Synapses()                                                             //
// Output: None                                                                            // 
// Note that in this project AMPA synapses were simulated as Exp2Syn                       //
//-----------------------------------------------------------------------------------------//
proc Distr_AMPA_Synapses(){local k
  for k=0, nAMPAsyn-1 {
    pos = DistDend.x[randAMPAloc.uniform(0,nDistDend-1)]
    pos3 = randAMPAdend.uniform (0.5, 0.999)
    dend_0[pos]{
      AMPAsyn[k] = new Exp2Syn(pos3)
      AMPAsyn[k].tau1 = AMPA_Rise
      AMPAsyn[k].tau2 = AMPA_Decay
      AMPAsyn[k].e = AMPA_Rev
    }                                              
  }
}   // end of proc Distr_AMPA_Synapses()


// ------- Procedure generateAMPAinputs  --------------------------------------------------//
// Generates the random inputs to the AMPA synapses                                        //
// Input: $1 = gAMPAvalue                                                                  //
// Call: generateAMPAinputs(gAMPAact)                                                      //
// Output: None                                                                            // 
//-----------------------------------------------------------------------------------------//
proc generateAMPAinputs(){local f, i, g
    // pick random values for time t and conductance g
    for f=0, nAMPAsyn-1 {
      for i=0, nAMPAinputs-1 {
          t = randAMPAt.repick()
          g = abs(randAMPAg.repick()*$1)
          AMPA_t_vec[f].x[i]= t
          AMPA_g_vec[f].x[i]= g
      }
    }
    for f=0, nAMPAsyn-1 {                     
      AMPA_t_vecr[f] = AMPA_t_vec[f].sort()        // sort the timestamps 
    }
    // generate vecstim-elements from the sorted timestamp-vectors -------------------------------   
    for i=0, nAMPAsyn-1{
      AMPA_Stim[i] = new VecStim()
      AMPA_Stim[i].play(AMPA_t_vecr[i])    // AMPA stimulator
    } 
    // link GABA-vecstim object via NetCon objects to the synapses ---------------------------------------------   
    for i=0, nAMPAsyn-1 {
       NetCon_AMPA[i] = new NetCon(AMPA_Stim[i], AMPAsyn[i], 0, 0, AMPA_g_vec[i].x[0])
    }    
}  // end of generateAMPAinputs()


// Procedure Pause -----------------------------------------------------------------------------//
// Inputs: none                                                                                 //
// Call: Pause(s)                                                                               //
// stops excecution fo s seconds                                                                //
// ---------------------------------------------------------------------------------------------//
proc pause() { local t0
  t0 = startsw()
  while (startsw()-t0 < $1) { }
}

// Function Detect_APs --------------------------------------------------------------------------//
// Inputs: $1 Objref to Inputvector                                                              //
//         $2 Theshold in mV                                                                     //
//                                                                                               //
// call Detect_APs(voltvec, APThresh)                                                            //
// returns   Number of APs as double                                                             //
//                                                                                               //
// Detets the numer of APs in a voltvector                                                       //
// ----------------------------------------------------------------------------------------------//
func Detect_APs() {local i, Refract, APs
  Refract = 0
  APs = 0
  for i=0, voltvec.size-1 {
    if (Refract == 0 && $o1.x[i]>$2){            //look for v crossing threshold in depolarizing direction for whole voltvec
         APs = APs + 1           // increase number of APs by one
         Refract = 1           // switch to refractory period
    }
    if (Refract == 1 && $o1.x[i]<$2-5){            //look for v crossing threshold in hyperpolarizing direction
                                                   // implemented 5 mV security interval here to omit triggering by noise  
              Refract = 0          // refractory period ends
     }        
  }
  return APs
}   //  End of function



//--DetermineSpikeProbab--------------------------------------------------------------------// 
// Determines the Spike Probability for the n= IntSteps gAMPA Steps between gMin and gMax   //
// Stores the spike Probability in the OutMatrix (global)                                   //
// Actualized new gMin and gMxx values (the two values closest to 50% spike Probability     //
// Input: $1 = Level                                                                        //
//        $2 = gMin                                                                         //
//        $3 = gMax                                                                         //
// Call:  DetermineSpikeProbab(Level, gMIN, gMAX)                                           //
// Output: None                                                                             //
// Globals: gMIN, gMAX willl be actualized                                                  //
//------------------------------------------------------------------------------------------//  
proc DetermineSpikeProbab(){local Rept, NumberAPs, SumAPs, IsExcit, NumberSupra

    SumAPs = 0                        // reset AP number counter
    NumberSupra = 0                   // reset number of suprathreshold retetitions

    for Rept = 1, NumberRept {
       // redistribute the synapses
       Distr_AMPA_Synapses()                            // distribute AMPA synapses randomly
       generateAMPAinputs(gAMPA*gAMPAfact)              // generate random glutamatergic inputs
       // run and analyse the simulation
       run()
       RepetitionIndex +=1                       
       NumberAPs = Detect_APs(voltvec, APThresh)
       if (NumberAPs> 0) {                         // at least one spike in trace
         SumAPs = SumAPs + NumberAPs
         NumberSupra = NumberSupra + 1
         IsExcit = 1
       }else{
         IsExcit = 0
       }
       // store the information
       storedata(OutCol, Rept, IsExcit, NumberAPs)
       printf("\n Rept %g of %g:",Rept, NumberRept)
       printf("Excit-Thresh = %g (av APs %g)", NumberSupra/Rept, SumAPs/Rept)
    } // end of for Rept
}// End of procedure DetermineSpikeProbab()


// ------- Init_Results_Array() -----------------------------------------------------------//
// Initializes the Random Functions                                                        //
// Input: $1 Column Identifier                                                                             //
// Uses global variables: gAMPA, gAMPAfact, AMPA_Rev, seed_AMPA                            // 
//                        gGABA, gGABAfact, GABA_Rev, seed_GABA                            //
//                        SpikeProbabResults                                               //
// Call: Init_Results_Array(OutCol)                                                              //
// Output: None                                                                            // 
//-----------------------------------------------------------------------------------------//
proc Init_Results_Array() {
    SpikeProbabResults.resize(NumberRept+3, $1+3)
    SpikeProbabResults.x[0][$1] = gAMPA * gAMPAfact 
    SpikeProbabResults.x[1][$1] = AMPA_Rev 
    SpikeProbabResults.x[2][$1] = seed_AMPA
    OutRow = 2                                // Set the OutRow index to the end of the table
} // end of procedure Init_Results_Array


//--storedata-------------------------------------------------------------------------------// 
// Stores the relevant data in the results array SpikeProbabResults                         //
// Input: $1 = Colums Identifier                                                            //
//        $2 = actual Repetition                                                            //
//        $2 = Excitatory (0/1)                                                             //
//        $3 = Number of APs                                                                //
// Call:  storedata(OutCol, Rept, IsExcit, NumberAPs)                                       //
// Output: None                                                                             //
// Globals: OutRow will be actualized                                                       //
//------------------------------------------------------------------------------------------//  
proc storedata(){
    OutRow = OutRow + 1   // New Row for output
    SpikeProbabResults.x[OutRow][$1+0] = $2
    SpikeProbabResults.x[OutRow][$1+1] = $3
    SpikeProbabResults.x[OutRow][$1+2] = $4
} // End of Store Data


//--savedata-------------------------------------------------------------------------------// 
// Stores the results array SpikeProbabResults in a File                                   //
// Input: Result Array                                                                     //
// Call:  savedata(SpikeProbabResults)                                                     //
// Output: None                                                                            //
// Globals: OutRow will be actualized                                                      //
//-----------------------------------------------------------------------------------------// 
proc savedata(){
   OutSPRFile = new File()
   sprint(OutSPRName, "Results_%s-%s%s-%s-%s-%gHz.asc", PROGRAM, VERSION, DENOM, CELL, AP, StimFreq)
   OutSPRFile.wopen(OutSPRName) 
   $o1.fprint(OutSPRFile, "\t%g")     
   OutSPRFile.close

   RepetitionFile = new File()
   sprint(ReptFileName, "Repetitions_%s-%s%s-%s-%s-%gHz.asc", PROGRAM, VERSION, DENOM, CELL, AP, StimFreq)
   RepetitionFile.wopen(ReptFileName)
   RepetitionFile.printf("For this Simulation %g repetitions are required!", RepetitionIndex)
   RepetitionFile.close()
}

// ________________________________________________________________________________________________
// ---- Start of Simulation -----------------------------------------------------------------------
// ________________________________________________________________________________________________

gAMPAfact = gAMPAstart
OutCol = 0
while (gAMPAfact <= gAMPAend){ 
    printf("Start Parameter Set (Distal): %gHz_AMPA%gpS%gmV", StimFreq, gAMPA*gAMPAfact*1000, AMPA_Rev)
    Init_Random()
    Init_Results_Array(OutCol)

    DetermineSpikeProbab()
    OutCol = OutCol + 3
    printf("\n\n Parameters: %gHz_AMPA%gpS%gmV terminated sucessfully \n",  StimFreq, gAMPA*gAMPAfact, AMPA_Rev)
    gAMPAfact = gAMPAfact + gAMPAstep
} // end of while
savedata(SpikeProbabResults)

printf("Program teminated")
//Otherwise strange interptreted defect