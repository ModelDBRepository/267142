// AMPA_only_SPike_Probabiliry-RatserPlot_2_Final
// Produces a set of Ap times used for a raster plot 
//
// No GABA synapses in this version - Probability of different gAMPA at different locations 
//
// AMPA Synapses are Exp2-Synapses with physiological kinetic properties and
// a fixed reversal potential of -12 mV (from pAMPA = 0.5, e(Na) = 66, e(K) = -90) and fixed conductance
// 
// Author: Werner Kilb
// Version 2.Final
// Date: 16-Apr-2021
//--------------------------------------------------

// Header Values ------------------------------------------------------
    strdef VERSION, CELL, AP, DENOM, PROGRAM
    PROGRAM = "AMPA_SpikeProbab_Raster"
    VERSION = "2-Final"
    CELL = "Real"
    AP = "ndrf"
    gKaMax_ndrfAP = 0.0018    // adapt gK to prevent depolarization block during EPSPs
    DENOM = "X"
    VARIABLE = 0

    //Parameters to define the frequency
    StimStart = 50         //- Fixed
    StimDuration = 2000
    StimNumber = 20 
    StimFreq = StimNumber/StimDuration * 1000
    tstop = StimStart+StimDuration+50 
  
// ------------Definition of Parameters -------------------------------
    // seed Values for random generator
    seed_AMPA = 3

    // Determination Parameters AMPA ------------------------------------
    gAMPA_value = 2.93
    gAMPA = gAMPA_value/1000     // µS synaptic weight for ca. 50% Spike Probability
    AMPA_Rise = 0.5             // ms arbitraray Value
    AMPA_Decay = 11             // ms from Lombardi et a. (2018)
    AMPA_Rev = -12              // mV Estmated reversal potential 
    nAMPAsyn = StimNumber       // Number of GABA synapses 
    nAMPAinputs = 1             // number of inputs per synapse

    // Definition of various runtime parameters --------------------------
    v_init = -50.5              // Initial voltage
    dt = 0.025                  // Step Interval in ms
    celsius = 31                // measured at°C
    ndend=56                    // Number of dendrites
    NumberRept = 300            //Number or repetitions
    APThresh = -10              // mV Thresholf for AP-detection algorithm

    RunIndex = VARIABLE         // counter for number or repetitions
    LineInd = VARIABLE          // Index for the element in output vectors

    ON = 1
    OFF = 0
       

// Define vectors to link modelled parameter output ---------------------------------
    objref voltvec, timevec                                            
    voltvec = new Vector()                                     // Vector used fors torage of voltage trace for further analysis
    timevec = new Vector()                                     // Vector
    voltvec.record(&v(.5))                                     // Link Volt vector (mesured in soma) to Output-Vectors
    timevec.record(&t)                                         // Link time vector

// ---------Definition of synaptic objects -------------------------------------
    // Objects for Synapses ---------------------------------------------------------
    objref AMPAsyn[nAMPAsyn]

    // random function for synapse definition
    objref randAMPAloc                    // random function for determination of dendrite number
    objref randAMPAdend                   // random function for localization of synapses in which dendrite 
    objref randAMPAt, randAMPAg           // random function for synaptip parameters (timing and g)

    // definition of Vectors for AMPA-Stimulation
    objref AMPA_Stim[nAMPAsyn], AMPA_t_vec[nAMPAsyn], AMPA_t_vecr[nAMPAsyn], NetCon_AMPA[nAMPAsyn], AMPA_g_vec[nAMPAsyn]




// ---- Output vectors and files ---------------------------------------------------------------------------------
    objref TimeStamp_List 
    TimeStamp_List = new Vector()                             // Output Vector for one run() of the simulation, variable length

    objref TimeStamp_Results                                  // Matrix for outputs
                                                               // Definition of the output matrix
                                                               //                                   Col[0]          Col[1]      Col[2]       ...  Repeated for each repitition
                                                               // Line[0]                            gAMPA          gAMPA       gAMPA
                                                               // Line[1]                            gGABA          gGABA       gGABA
                                                               // Line[2]                            seed           seed        seed      
                                                               // Line[3]                            GABA_Rev       GABA_Rev    GABA_Rev
                                                               // Line[4]                            Rept1          Rept 2      Rept3
                                                               // Line[5]                             t[1st AP]
                                                               //  ..                                 t[n. AP]
                                                               // Variable length!!
    

    TimeStamp_Results = new Matrix()
    OutCol = VARIABLE                                          // Set of Columns in the Results-Array
    strdef OutSPRName                                          // Define Name of Output-File for Rheo-Shift Matrix
    objref OutSPRFile                                          // Define Output File for Rheo-Shift Matrix



// ------- Init_Random() ------------------------------------------------------------------//
// Initializes the Random Functions                                                        //
// Input: seed_AMPA                                                                        //
// Call: Init_Random()                                                            //
// Output: None                                                                            // 
//-----------------------------------------------------------------------------------------//
proc Init_Random() {
    // Initialize Random Functions -----------
    randAMPAloc = new Random(seed_AMPA+1)
    randAMPAdend = new Random(seed_AMPA+3)
    randAMPAt = new Random(seed_AMPA+5)
    randAMPAg = new Random(seed_AMPA+6)
 


    //Define properties of random Function 
    randAMPAt.uniform(50, tstop - 50)
    randAMPAg.normal(1, 0.26) //rel variance of AMPA according to results


    // generate Vectors --- (nGABAinputs, nAMPAinputs defines number of inputs per synapse) ------
    for i = 0, nAMPAsyn-1 {
       AMPA_t_vec[i] = new Vector(nAMPAinputs)
       AMPA_t_vecr[i] = new Vector(nAMPAinputs)
       AMPA_g_vec[i] = new Vector(nAMPAinputs)
    }
} // end of proc InitRandom

// ------- Procedure Distr_AMPA_Synapses --------------------------------------------------//
// Distributes the AMPA synpases across the dendrite                                       //
// Input: None                                                                             //
// Uses global constants: AMPA_Rise, AMPA_Decay                                            //
// Call: Distr_AMPA_Synapses()                                                             //
// Output: None                                                                            // 
// Note that in this project AMPA synapses were simulated as Exp2Syn                       //
//-----------------------------------------------------------------------------------------//
proc Distr_AMPA_Synapses(){local k
  for k=0, nAMPAsyn-1 {
    pos = randAMPAloc.uniform(0,ndend-1)
    pos3 = randAMPAdend.uniform (0.5, 0.999)
    dend_0[pos]{
      AMPAsyn[k] = new Exp2Syn(pos3)
      AMPAsyn[k].tau1 = AMPA_Rise
      AMPAsyn[k].tau2 = AMPA_Decay
      AMPAsyn[k].e = AMPA_Rev
    }                                              
  }
}   // end of proc Distr_AMPA_Synapses()


// ------- Procedure generateAMPAinputs  --------------------------------------------------//
// Generates the random inputs to the AMPA synapses                                        //
// Input: $1 = gAMPAvalue                                                                  //
// Call: generateAMPAinputs(gAMPA)                                                         //
// Output: None                                                                            // 
//-----------------------------------------------------------------------------------------//
proc generateAMPAinputs(){local f, i, g
    // pick random values for time t and conductance g
    for f=0, nAMPAsyn-1 {
      for i=0, nAMPAinputs-1 {
          t = randAMPAt.repick()
          g = abs(randAMPAg.repick()*$1)
          AMPA_t_vec[f].x[i]= t
          AMPA_g_vec[f].x[i]= g
      }
    }
    for f=0, nAMPAsyn-1 {                     
      AMPA_t_vecr[f] = AMPA_t_vec[f].sort()        // sort the timestamps 
    }
    // generate vecstim-elements from the sorted timestamp-vectors -------------------------------   
    for i=0, nAMPAsyn-1{
      AMPA_Stim[i] = new VecStim()
      AMPA_Stim[i].play(AMPA_t_vecr[i])    // AMPA stimulator
    } 
    // link GABA-vecstim object via NetCon objects to the synapses ---------------------------------------------   
    for i=0, nAMPAsyn-1 {
       NetCon_AMPA[i] = new NetCon(AMPA_Stim[i], AMPAsyn[i], 0, 0, AMPA_g_vec[i].x[0])
    }    
}  // end of generateAMPAinputs()


// Procedure Pause -----------------------------------------------------------------------------//
// Inputs: none                                                                                 //
// Call: Pause(s)                                                                               //
// stops excecution fo s seconds                                                                //
// ---------------------------------------------------------------------------------------------//
proc pause() { local t0
  t0 = startsw()
  while (startsw()-t0 < $1) { }
}

// Function Detect_APs --------------------------------------------------------------------------//
// Inputs: $1 Objref to voltvec                                                                  //
//         $2 Theshold in mV                                                                     //
//         $3 Objref to timevec                                                                  //
//                                                                                               //
// call Detect_APs(voltvec, APThresh, timevec)                                                   //
// returns   Number of APs as double                                                             //
//                                                                                               //
// Detets the numer of APs in a voltvector                                                       //
// ----------------------------------------------------------------------------------------------//
proc Detect_APs() {local i, Refract, APs
  Refract = 0
  for i=0, $o1.size-1 {
    if (Refract == 0 && $o1.x[i]>$2){            //look for v crossing threshold in depolarizing direction for whole voltvec
         // AP detected by one
         TimeStamp_List.append($o3.x[i])  
         Refract = 1           // switch to refractory period
    }
    if (Refract == 1 && $o1.x[i]<$2-5){            //look for v crossing threshold in hyperpolarizing direction
                                                   // implemented 5 mV security interval here to omit triggering by noise  
              Refract = 0          // refractory period ends
     }        
  }
}   //  End of function



//--DetermineSpikeProbab--------------------------------------------------------------------------// 
// Determines the Spike Probability for the n= IntSteps gAMPA Steps between gMin and gMax         //
// Stores the spike Probability in the OutMatrix (global)                                         //
// Actualized new gMin and gMax values (the two values closest to 50% spike Probability           //
// Input: $1  conductance of the AMPA synapse                                                     //
//        $2  seed Value for seed AMPA                                                            //
// Uses the global variable LineInd for output in vectors                                         //
// Call:  DetermineSpikeProbab(gAMPA*gAMPAfact, seed_AMPA)                                        //
// Output: None                                                                                   //
//------------------------------------------------------------------------------------------------//  
proc DetermineSpikeProbab(){local Rept, SumAPs, NumberSupra
       Init_Random($2)                                           // induce repetitions with different seed values
       SumAPs = 0                                                // reset AP number counter
       NumberSupra = 0                                           // reset number of suprathreshold repetitions

       for Rept = 1, NumberRept{ 
          // redistribute the synapses
          Distr_AMPA_Synapses()                            // distribute AMPA synapses randomly
          generateAMPAinputs($1)                           // generate random glutamatergic inputs
          Init_Out_Vector(TimeStamp_List,gAMPA,seed_AMPA,Rept)
          // run and analyse the simulation
          run()                       
          Detect_APs(voltvec, APThresh, timevec)          // put stike times in TimeStamp_List
          printf("Spike times for repetition %g ",Rept)
          TimeStamp_List.printf()
          Add_To_Results(TimeStamp_List)
        } // end of for (Rept...)
       // store the information
        
}// End of procedure DetermineSpikeProbab()


// Procedure Init_Out_Vector  ------------------------------------------------------------------------//
// Clears the three data-output vectors                                                               //
// Inputs: $1 ObjRef to ERev_List                                                                     //
//         $2 gAMPA                                                                                   //
//         $3 Seed                                                                                    //
//         $4 Rept                                                                                    //
// Call:   Init_Out_Vector(TimeStamp_List,gAMPA,gGABA_List.x[gGABA_Step -1],Seed_AMPA,GABA_Rev,Rept)  //     
// ---------------------------------------------------------------------------------------------------//
proc Init_Out_Vector() {
   $o1.resize(5)
   $o1.x[0] = $2*1000
   $o1.x[1] = $3
   $o1.x[2] = $4
} // end of proc

// Function Max() ---------------------------------------------------------------------//
// Provides the larger Values of 2 elements                                            //
// Inputs: $1 Element 1                                                                //
//         $2 Element 2                                                                //
// Call  : Max(TimeStamp_List.size(), TimeStamp_Results.nrow())                       //
// Output: The larger of the two input values                                          //
// ------------------------------------------------------------------------------------//
func Max(){
    if ($1 > $2){
        return $1
    } else {
        return $2
    }
}

// Procedure Add_To_Results ---------------------------------------------------------------------//
// Transferes the results from one Synapse position (in One-Parameter Vector) to Results array   //
// Inputs: $1 ObjRef to TimeStamp_List                                                           //
// Call:   Add_To_Results(TimeStamp_List)                                                        //     
// Other Variables are  global variables                                                         //
// ----------------------------------------------------------------------------------------------//
proc Add_To_Results() {local MaxRow
   MaxRow = Max(TimeStamp_List.size(), TimeStamp_Results.nrow())     // Determines if Time Stap list has more elements that rows in output array
   TimeStamp_Results.resize(MaxRow, TimeStamp_Results.ncol()+1)      // New colums, ev new lines to output array
   TimeStamp_Results.setcol(TimeStamp_Results.ncol()-1, $o1)         // copy TimeStamp_List in the last Column of the TimeStamp_Results Array
} // end of proc


//--savedata-------------------------------------------------------------------------------// 
// Stores the results array TimeStamp_Results in a File                                   //
// Input: Result Array                                                                     //
// Call:  savedata(TimeStamp_Results)                                                     //
// Output: None                                                                            //
// Globals: OutRow will be actualized                                                      //
//-----------------------------------------------------------------------------------------// 
proc savedata(){
   OutSPRFile = new File()
   sprint(OutSPRName, "Results_%s-%s%s-%s-%s_AMPA%gpS_%gHz.asc", PROGRAM, VERSION, DENOM, CELL, AP, gAMPA*1000, StimFreq)
   OutSPRFile.wopen(OutSPRName) 
   $o1.fprint(OutSPRFile, "\t%g")     
   OutSPRFile.close
}


// ________________________________________________________________________________________________
// ---- Start of Simulation -----------------------------------------------------------------------
// ________________________________________________________________________________________________


printf("Start Program_%s-%s%s-%s-%s_AMPA%gpS_%gHz", PROGRAM, VERSION, DENOM, CELL, AP, gAMPA*1000, StimFreq)

// determine spike probability performed n = NumberRept repition of the simulations, each with random location/timing/strength of AMPA synapses
DetermineSpikeProbab(gAMPA, seed_AMPA) 

printf("\n -- Simulation finished -- \n\n")
savedata(TimeStamp_Results)
printf("Program_%s-%s%s-%s-%s_AMPA%gpS)", PROGRAM, VERSION, DENOM, CELL, AP, gAMPA*1000)
printf(" terminated")
printf(" sucesfully")

